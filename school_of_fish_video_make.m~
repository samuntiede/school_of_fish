% Implement a simple "school of fish" behaviour in a shallow pond. The pond
% is modelled by the unit square 0<x<1 and 0<y<1, with periodic boundary
% conditions. 
%
% In this file we test three rules: the "no collision" RULE 1, 
% the "staying together" RULE 2 and the "alignment" RULE 3. 
%
% Samuli Siltanen January 2021

%% Parameters

% Parameters for plotting
msize = 1;
Nframes = 20;
poolcolor = [210 210 255]/255;
fishcolor = [67 93 114]/255;
lwidth = .5;
fishlen = .03;

% Parameters for the school model
M = 1;
Nfish = M^2;
step = .005; % Maximum length of movement of each fish in each frame
R1 = fishlen/2; % Radius for avoiding collisions, related to RULE 1
R2 = .2; % Radius for staying together, related to RULE 2
R3 = .1; % Radius for aligning velocities, related to RULE 3
noiseA = .002; % Amplitude of noise added to the flock matrix in each frame 

globratio = .1;

%% Build the school matrix
% school model is a matrix containing the positions of fish
% (first column for x-coordinates and second column for y-coordinates)
% and the velocity vectors of fish
% (third column for x-coordinates and fourth column for y-coordinates)

% Initialize locations
t = linspace(.3,.7,M);
[X,Y] = meshgrid(t);
school = [X(:),Y(:),zeros(Nfish,1),zeros(Nfish,1)];

% Initialize velocities
velmat = [2*(rand(Nfish,1)-.5),2*(rand(Nfish,1)-.5)].';
tmp = sqrt(velmat(1,:).^2+velmat(2,:).^2);
velmat = velmat./[tmp;tmp];
school = MaxVeloEnforce([school(:,1:2),velmat.']);
% school = MaxVeloEnforce([school(:,1:2),-school(:,1:2)]); %  vectors toward the origin


%% Loop over frames

for iii = 1:Nframes
    
    % Update the velocity part of the school information matrix
    %school = MaxVeloEnforce(school + 1/6*(.4*FlockUpdateRule3(school,R3) + FlockUpdateRule2(school,R2,globratio) + FlockUpdateRule1(school,R1))); % RULES 1&2&3
    
    % Enforce periodic boundary conditions
    school(:,1:2) = school(:,1:2)-floor(school(:,1:2));
    
    % Create plot window
    figure(1)
    clf
    
    % Plot water background
    p11 = patch([1 1 1 -1 -1],[-1 -1 1 1 -1],poolcolor);
    %set(p11,'EdgeColor',poolcolor)
    hold on
    for lll=1:Nfish
        vedir = [school(lll,3),school(lll,4)];
        vedir = vedir/norm(vedir);
        p0 = patch(...
            school(lll,1)+[.05*vedir(1),-.05*vedir(2),-.9*vedir(1),.05*vedir(2)]*fishlen,...
            school(lll,2)+[.05*vedir(2),.05*vedir(1),-.9*vedir(2),-.05*vedir(1)]*fishlen,...
            fishcolor);
        set(p0,'EdgeColor',fishcolor)
        hold on
    end
    p1 = plot(school(:,1),school(:,2),'r.','markersize',4*msize);
    set(p1,'color',fishcolor)
    %plot(school(FEP_ind,1),school(FEP_ind,2),'b.','markersize',2*msize)
    %plot(school(R3_ind,1),school(R3_ind,2),'b.','markersize',4*msize)
%     CURMINx = min(school(:,1))-fishlen;
%     CURMAXx = max(school(:,1))+fishlen;
%     CURMINy = min(school(:,2))-fishlen;
%     CURMAXy = max(school(:,2))+fishlen;
%     sqside = max(1,max([CURMAXx-CURMINx,CURMAXy-CURMINy]));
%     CENx = mean([CURMAXx,CURMINx]);
%     CENy = mean([CURMAXy,CURMINy]);
    axis equal
    %axis([CENx-sqside/2-2*fishlen,CENx+sqside/2+2*fishlen,CENy-sqside/2-2*fishlen,CENy+sqside/2+2*fishlen])
    axis([-1.9*MAX 1.9*MAX -MAX MAX ])
    axis off
    drawnow
    
    % Take a look
    %     figure(1)
    %     clf
    %     patch([-MAX MAX MAX -MAX -MAX],[-MAX -MAX MAX MAX -MAX],poolcolor)
    %     hold on
    %     plot(school(:,1),school(:,2),'r.','markersize',msize)
    %     plot([-MAX MAX],[MAX MAX],'k')
    %     plot([-MAX MAX],-[MAX MAX],'k')
    %     plot([MAX MAX],[-MAX MAX],'k')
    %     plot(-[MAX MAX],[-MAX MAX],'k')
    %     axis(1.1*[-MAX MAX -MAX MAX])
    %     axis equal
    %     axis off
    %     title(num2str([iii Nframes]))
    %     drawnow
    
    % Write frame to file
    % Initial image
    im1 = print('-r400','-RGBImage');
    [row1,col1] = size(im1(:,:,1));
    
    % Crop the image
    startrow = round(.23*row1);
    endrow   = round(.7*row1);
    %startcol = round(.3*col1);
    %endcol   = round(.7*col1);
    %im1 = im1(startrow:endrow,startcol:endcol,:);
    im1 = im1(startrow:endrow,:,:);
    
    % Adjust image height to 1080
    im3 = imresize(im1, [1080 NaN]);
    [row3, col3, tmp3] = size(im3);
    im3 = im3(:,round((col3-1920)/2)+60+[1:1920],:);
    
    % Save to file
    fname3 = ['frames06G/frame_', num2str(iii), '.png'];
    imwrite(im3,fname3,'png');
    
    % Update positions of fish based on the velocities
    school = [...
        school(:,1)+step*school(:,3),...
        school(:,2)+step*school(:,4),...
        school(:,3:4)];
    
    % Add noise
    school = school + noiseA*randn(size(school));
    
    disp([iii Nframes])
end
